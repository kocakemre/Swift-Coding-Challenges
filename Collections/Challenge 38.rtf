{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 TimesNewRomanPSMT;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue120;\red163\green0\blue79;
\red255\green255\blue255;\red73\green17\blue135;\red135\green135\blue135;\red107\green0\blue109;\red148\green108\blue71;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c54510;\cssrgb\c70588\c0\c38431;
\cssrgb\c100000\c100000\c100000;\cssrgb\c36078\c14902\c60000;\cssrgb\c60000\c60000\c60000;\cssrgb\c50196\c0\c50196;\cssrgb\c65098\c49804\c34902;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww15300\viewh16500\viewkind0
\deftab720
\pard\pardeftab720\sl560\sa240\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
Challenge 38: Find N smallest 
\f1\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Difficulty: 
\f2\b0 Easy\uc0\u8232 Write an extension for all collections that returns the 
\f1\i N 
\f2\i0 smallest elements as an array, sorted 
\f1\fs24 \

\f2\fs32 smallest first, where N is an integer parameter. 
\f1\fs24 \
\pard\pardeftab720\sl440\sa240\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf2 Sample input and output 
\f1\b0\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0
\f2\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 [1, 2, 3, 4].challenge38(count: 3) 
\f2\b0 \cf2 should return [1, 2, 3]. \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 ["q", "f", "k"].challenge38(count: 10) 
\f2\b0 \cf2 should return [\'93f\'94, \uc0\u8232 \'93k\'94, \'93q\'94]. \u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 [256, 16].challenge38(count: 3) 
\f2\b0 \cf2 should return [16, 256]. \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 [String]().challenge38(count: 3) 
\f2\b0 \cf2 should return an empty \uc0\u8232 array. \u8232 
\f0\b\fs37\fsmilli18667 Hints 
\f2\b0\fs32 \uc0\u8232 
\f1\b Hint #1: 
\f2\b0 You\'92ll need to extend the 
\f3\b \cf3 Collection 
\f2\b0 \cf2 type with a constraint.\uc0\u8232 
\f1\b Hint #2: 
\f2\b0 Finding the smallest of any value requires using the 
\f3\b \cf3 < 
\f2\b0 \cf2 operator, which is guaranteed \uc0\u8232 to exist when something conforms to 
\f3\b \cf3 Comparable
\f2\b0 \cf2 .\uc0\u8232 
\f1\b Hint #3: 
\f2\b0 The collection might be contain fewer than 
\f1\i N 
\f2\i0 items. \uc0\u8232 
\f1\b Hint #4: 
\f2\b0 The solution is made more interesting by the requirement to return a variable number of results. \uc0\u8232 
\f1\b Hint #5: 
\f2\b0 If you want to avoid complexity, use 
\f3\b \cf3 sorted()
\f2\b0 \cf2 . \uc0\u8232 
\f0\b\fs37\fsmilli18667 Solution 
\f2\b0\fs32 \uc0\u8232 Finding the single smallest value in a collection is easy enough; finding the two smallest values in a collection is fractionally harder, because you need to move the smallest to smaller if a suitable small new value comes in. if a suitable small new value comes in. Finding the 
\f1\i N 
\f2\i0 smallest numbers is more difficult again, or would be if you followed the same technique. Rather than keeping individual variables for smallest and smaller, you would need to keep a sorted array of small values, inserting new values in the correct position as they came in. This isn\'92t hard to code, but neither is it terribly fast, and it becomes pretty disastrously slow if you had to insert lots of numbers. A solution that\'92s both significantly simpler and significantly faster is to use the built-in 
\f3\b \cf3 sorted() 
\f2\b0 \cf2 method followed by 
\f3\b \cf3 prefix()
\f2\b0 \cf2 , which returns the first 
\f1\i N 
\f2\i0 items in a collection. If there are fewer items than you request, 
\f3\b \cf3 prefix() 
\f2\b0 \cf2 will return as many as it can \'96 perfect for this challenge. 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 So, the smart solution is as follows: 
\f1\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf4 \cb5 extension \cf6 Collection \cf4 where \cf6 Iterator\cf7 .\cf6 Element\cf7 : \cf6 Comparable \cf7 \{\
\cf4    func \cf8 challenge38\cf7 (\cf6 count\cf7 : \cf6 Int\cf7 ) \cf9 -> \cf7 [\cf6 Iterator\cf7 .\cf6 Element\cf7 ] \{\
\cf4       let \cf6 sorted \cf9 = \cf4 self\cf7 .\cf8 sorted\cf7 ()\
\cf4       return \cf8 Array\cf7 (\cf6 sorted\cf7 .\cf4 prefix\cf7 (\cf6 count\cf7 ))\
   \}\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf7 \} 
\f1\fs24 \cf2 \cb1 \
}