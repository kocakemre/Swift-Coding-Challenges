{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 TimesNewRomanPSMT;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue120;\red163\green0\blue79;
\red255\green255\blue255;\red73\green17\blue135;\red135\green135\blue135;\red148\green108\blue71;\red107\green0\blue109;
\red0\green0\blue255;\red28\green117\blue20;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c54510;\cssrgb\c70588\c0\c38431;
\cssrgb\c100000\c100000\c100000;\cssrgb\c36078\c14902\c60000;\cssrgb\c60000\c60000\c60000;\cssrgb\c65098\c49804\c34902;\cssrgb\c50196\c0\c50196;
\cssrgb\c0\c0\c100000;\cssrgb\c11373\c52157\c9804;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww15300\viewh16500\viewkind0
\deftab720
\pard\pardeftab720\sl560\sa240\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
Challenge 37: Count the numbers 
\f1\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Difficulty: 
\f2\b0 Easy\uc0\u8232 Write an extension for collections of integers that returns the number of times a specific digit 
\f1\fs24 \

\f2\fs32 appears in any of its numbers. 
\f1\fs24 \
\pard\pardeftab720\sl440\sa240\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf2 Sample input and output 
\f1\b0\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0
\f2\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 [5, 15, 55, 515].challenge37(count: "5") 
\f2\b0 \cf2 should return 6. \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 [5, 15, 55, 515].challenge37(count: "1") 
\f2\b0 \cf2 should return 2. \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 [55555].challenge37(count: "5") 
\f2\b0 \cf2 should return 5. \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 [55555].challenge37(count: "1") 
\f2\b0 \cf2 should return 0. \uc0\u8232 
\f0\b\fs37\fsmilli18667 Hints 
\f2\b0\fs32 \uc0\u8232 
\f1\b Hint #1: 
\f2\b0 You\'92ll need to extend the 
\f3\b \cf3 Collection 
\f2\b0 \cf2 type with a specific constraint rather than a protocol constraint. \uc0\u8232 
\f1\b Hint #2: 
\f2\b0 If you convert each number to a string, you can loop over its characters.\uc0\u8232 
\f1\b Hint #3: 
\f2\b0 If you were functionally inclined, you could solve this challenge using 
\f3\b \cf3 reduce() 
\f2\b0 \cf2 \uc0\u8232 and 
\f3\b \cf3 filter()
\f2\b0 \cf2 . \uc0\u8232 
\f0\b\fs37\fsmilli18667 Solution 
\f2\b0\fs32 \uc0\u8232 To count the number of a specific digit inside an integer, the easiest thing to do is convert it to a string then check each character. Swift will only let you do this if you specify the correct constraint, which in this challenge ought to be 
\f3\b \cf3 Iterator.Element == Int
\f2\b0 \cf2 , like this: \uc0\u8232 \
\pard\pardeftab720\sl360\partightenfactor0

\f4 \cf4 \cb5 extension \cf6 Collection \cf4 where \cf6 Iterator\cf7 .\cf6 Element \cf8 == \cf6 Int \cf7 \{\
\cf4    func \cf9 challenge37a\cf7 (\cf6 count\cf7 : \cf6 Character\cf7 ) \cf8 -> \cf6 Int \cf7 \{\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf4 var \cf2 total \cf8 = \cf10 0 
\f1\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf11 \cb5 // loop over every element\
\pard\pardeftab720\sl360\partightenfactor0
\cf4       for \cf2 item \cf4 in self \cf7 \{\
\pard\pardeftab720\sl360\partightenfactor0
\cf11          // stringify this integer\
\pard\pardeftab720\sl360\partightenfactor0
\cf4          let \cf2 str \cf8 = \cf9 String\cf7 (\cf2 item\cf7 )\
\pard\pardeftab720\sl360\partightenfactor0
\cf11          // loop over letter in the string\
\pard\pardeftab720\sl360\partightenfactor0
\cf4          for \cf2 letter \cf4 in \cf2 str\cf7 .\cf2 characters \cf7 \{\
\cf4             if \cf2 letter \cf8 == \cf6 count \cf7 \{\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf2 total \cf8 += \cf10 1 \cf7 \} 
\f1\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f4\fs32 \cf7 \cb5 \} \} 
\f1\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf4 \cb5       return \cf2 total\
\cf7    \}\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf7 \} 
\f1\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 A more interesting solution is to use 
\f3\b \cf3 reduce() 
\f2\b0 \cf2 to whittle down the array of integers into a single number, then use 
\f3\b \cf3 filter() 
\f2\b0 \cf2 on each item to pick out characters that match the input digit: 
\f1\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf4 \cb5 func \cf9 challenge37b\cf7 (\cf6 count\cf7 : \cf6 Character\cf7 ) \cf8 -> \cf6 Int \cf7 \{\
\cf4       return self\cf7 .\cf9 reduce\cf7 (\cf10 0\cf7 ) \{\
\pard\pardeftab720\sl360\partightenfactor0
\cf2          $\cf10 0 \cf8 + \cf9 String\cf7 (\cf2 $\cf10 1\cf7 ).\cf2 characters\cf7 .\cf6 filter \cf7 \{ \cf2 $\cf10 0 \cf8 ==\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 count \cf7 \}.\cf6 count\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf7 \} \} 
\f1\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 That\'92s certainly much shorter, and arguably much clearer in its intent, but it\'92s unlikely to perform faster. 
\f1\fs24 \
}