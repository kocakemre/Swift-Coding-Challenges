{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 TimesNewRomanPSMT;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue120;\red163\green0\blue79;
\red255\green255\blue255;\red73\green17\blue135;\red135\green135\blue135;\red148\green108\blue71;\red107\green0\blue109;
\red0\green0\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c54510;\cssrgb\c70588\c0\c38431;
\cssrgb\c100000\c100000\c100000;\cssrgb\c36078\c14902\c60000;\cssrgb\c60000\c60000\c60000;\cssrgb\c65098\c49804\c34902;\cssrgb\c50196\c0\c50196;
\cssrgb\c0\c0\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww15300\viewh16500\viewkind0
\deftab720
\pard\pardeftab720\sl560\sa240\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
Challenge 39: Sort a string array by length 
\f1\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Difficulty: 
\f2\b0 Easy\uc0\u8232 Extend collections with a function that returns an array of strings sorted by their lengths, 
\f1\fs24 \

\f2\fs32 longest first. 
\f1\fs24 \
\pard\pardeftab720\sl440\sa240\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf2 Sample input and output 
\f1\b0\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0
\f2\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 ["a", "abc", "ab"].challenge39() 
\f2\b0 \cf2 should return 
\f3\b \cf3 ["abc", "ab", "a"]
\f2\b0 \cf2 . \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 ["paul", "taylor", "adele"].challenge39() 
\f2\b0 \cf2 should return 
\f3\b \cf3 ["taylor", "adele", "paul"]
\f2\b0 \cf2 . \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code 
\f3\b \cf3 [String]().challenge39() 
\f2\b0 \cf2 should return 
\f3\b \cf3 []
\f2\b0 \cf2 . \uc0\u8232 
\f0\b\fs37\fsmilli18667 Hints 
\f2\b0\fs32 \uc0\u8232 
\f1\b Hint #1: 
\f2\b0 You\'92ll need to extend the 
\f3\b \cf3 Collection 
\f2\b0 \cf2 type with a specific constraint rather than a protocol constraint. \uc0\u8232 
\f1\b Hint #2: 
\f2\b0 You should use the built-in 
\f3\b \cf3 sorted() 
\f2\b0 \cf2 method.\uc0\u8232 
\f1\b Hint #3: 
\f2\b0 You can provide a custom closure to 
\f3\b \cf3 sorted() 
\f2\b0 \cf2 to affect how it works. \uc0\u8232 
\f0\b\fs37\fsmilli18667 Solution 
\f2\b0\fs32 \uc0\u8232 This is a simple test that requires you to understand protocol extensions as well as using closures with built-in methods. There\'92s also some scope to discuss reverse sorting \'96 there 
\f1\i is 
\f2\i0 a built-in 
\f3\b \cf3 reversed() 
\f2\b0 \cf2 method, but if you\'92re writing a custom closure anyway you might as well just flip the operator from 
\f3\b \cf3 < 
\f2\b0 \cf2 to 
\f3\b \cf3 >
\f2\b0 \cf2 . \uc0\u8232 All in, it takes just one line of code to solve, as long as you embed that line inside the write method and extension definitions: \u8232 
\f4 \cf4 \cb5 extension \cf6 Collection \cf4 where \cf6 Iterator\cf7 .\cf6 Element \cf8 == \cf6 String \cf7 \{ 
\f0 \cf2 \cb1 www.hackingwithswift.com 124 
\f2 \uc0\u8232 \
\pard\pardeftab720\sl360\partightenfactor0

\f4 \cf4 \cb5 func \cf9 challenge39\cf7 () \cf8 -> \cf7 [\cf6 String\cf7 ] \{\
\cf4       return self\cf7 .\cf6 sorted \cf7 \{ \cf2 $\cf10 0\cf7 .\cf2 characters\cf7 .\cf6 count \cf8 >\
\cf2 $\cf10 1\cf7 .\cf2 characters\cf7 .\cf6 count \cf7 \}\
   \}\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf7 \} 
\f1\fs24 \cf2 \cb1 \
}