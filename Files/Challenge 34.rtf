{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 TimesNewRomanPSMT;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue120;\red163\green0\blue79;
\red255\green255\blue255;\red107\green0\blue109;\red135\green135\blue135;\red73\green17\blue135;\red148\green108\blue71;
\red0\green0\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c54510;\cssrgb\c70588\c0\c38431;
\cssrgb\c100000\c100000\c100000;\cssrgb\c50196\c0\c50196;\cssrgb\c60000\c60000\c60000;\cssrgb\c36078\c14902\c60000;\cssrgb\c65098\c49804\c34902;
\cssrgb\c0\c0\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww15300\viewh16500\viewkind0
\deftab720
\pard\pardeftab720\sl560\sa240\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
Challenge 34: Find executables 
\f1\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Difficulty: 
\f2\b0 Tricky\uc0\u8232 Write a function that accepts the name of a directory to scan, and returns an array containing 
\f1\fs24 \

\f2\fs32 the name of any executable files in there. 
\f1\fs24 \
\pard\pardeftab720\sl440\sa240\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf2 Sample input and output 
\f1\b0\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0
\f2\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
If directory/a exists and is executable, \'93a\'94 should be in the array you return. \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
If directory/subdirectory/a exists and is executable, it should 
\f1\i not 
\f2\i0 be in the array you \uc0\u8232 return; only return files in the directory itself, not its subdirectories. \u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
If there are no executable files, return an empty array. \uc0\u8232 
\f0\b\fs37\fsmilli18667 Hints 
\f2\b0\fs32 \uc0\u8232 
\f1\b Hint #1: 
\f2\b0 Make sure you create the test directories as shown in the sample input/output. You can use 
\f3\b \cf3 touch a 
\f2\b0 \cf2 to create a file called \'93a\'94, then 
\f3\b \cf3 chmod a+x a 
\f2\b0 \cf2 to mark it executable. \uc0\u8232 
\f1\b Hint #2: 
\f2\b0 You probably want to use the 
\f3\b \cf3 isExecutableFile() 
\f2\b0 \cf2 method of 
\f3\b \cf3 FileManager
\f2\b0 \cf2 . 
\f1\b Hint #3: 
\f2\b0 If you don\'92t create at least one subdirectory to test with, your tests will be \uc0\u8232 incomplete. \u8232 
\f1\b Hint #4: 
\f2\b0 Directories are considered executable for historical reasons. If they appear in your return array, you won\'92t have passed the challenge. \uc0\u8232 
\f0\b\fs37\fsmilli18667 Solution 
\f2\b0\fs32 \uc0\u8232 This is an easy challenge to fail if you didn\'92t bother to create the sample input and check that your code works as expected. Working with filesystems is 
\f1\i always 
\f2\i0 replete with gotchas, and this challenge is no different: if you thought you could just get a list of all the files in the directory and return those that are executable, your code won\'92t work properly because 
\f3\b \cf3 FileManager 
\f2\b0 \cf2 considers directories to be executable. 
\f3\b \cf3 FileManager 
\f2\b0 \cf2 considers directories to be executable. The reason for this is historical: file permissions mean one thing when they are attached to files, and something else entirely when attached to directories. For files, executable permission means the file can be run, so it\'92s a script or a binary. However, for directories executable permission means the user can enter into the directory and access its contents. By default, all directories are considered executable, so you must explicitly filter out any directories you find. Once that\'92s done, you can use 
\f3\b \cf3 isExecutableFile() 
\f2\b0 \cf2 to check what remains. 
\f1\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f2\fs32 \cf2 Here\'92s my solution: 
\f1\fs24 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf4 \cb5 func \cf6 challenge34\cf7 (\cf4 in \cf2 directory\cf7 : \cf8 String\cf7 ) \cf9 -> \cf7 [\cf8 String\cf7 ] \{\
\cf4    let \cf2 fm \cf9 = \cf8 FileManager\cf7 .\cf2 default\
\cf4    let \cf2 directoryURL \cf9 = \cf6 URL\cf7 (\cf2 fileURLWithPath\cf7 : \cf2 directory\cf7 )\
\cf4    guard let \cf2 files \cf9 = \cf4 try\cf9 ? \cf2 fm\cf7 .\cf6 contentsOfDirectory\cf7 (\cf2 at\cf7 :\
\cf2 directoryURL\cf7 , \cf2 includingPropertiesForKeys\cf7 : \cf10 nil\cf7 ) \cf4 else \cf7 \{ \cf4 return\
\cf7 [] \}\
\cf4    var \cf2 returnValue \cf9 = \cf7 [\cf8 String\cf7 ]()\
\cf4    for \cf2 file \cf4 in \cf2 files \cf7 \{\
\cf4       guard \cf2 file\cf7 .\cf2 hasDirectoryPath \cf9 == \cf10 false \cf4 else \cf7 \{ \cf4 continue \cf7 \}\
\cf4       if \cf2 fm\cf7 .\cf6 isExecutableFile\cf7 (\cf2 atPath\cf7 : \cf2 file\cf7 .\cf2 path\cf7 ) \{\
\cf2          returnValue\cf7 .\cf6 append\cf7 (\cf2 file\cf7 .\cf2 lastPathComponent\cf7 )\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf7 \} \} 
\f1\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs32 \cf4 \cb5    return \cf2 returnValue\
\cf7 \}\
}